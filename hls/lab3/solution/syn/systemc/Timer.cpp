// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Timer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Timer::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> Timer::ap_const_lv1_0 = "0";
const sc_lv<32> Timer::ap_const_lv32_1 = "1";
const sc_lv<1> Timer::ap_const_lv1_1 = "1";
const sc_lv<2> Timer::ap_const_lv2_0 = "00";
const sc_logic Timer::ap_const_logic_0 = sc_dt::Log_0;
const bool Timer::ap_const_boolean_1 = true;

Timer::Timer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    StgValue_16_Timer_on_clock_fu_66 = new Timer_on_clock("StgValue_16_Timer_on_clock_fu_66");
    StgValue_16_Timer_on_clock_fu_66->ap_clk(clk_i);
    StgValue_16_Timer_on_clock_fu_66->ap_rst(ap_rst);
    StgValue_16_Timer_on_clock_fu_66->rst_i(rst_i);
    StgValue_16_Timer_on_clock_fu_66->en_i(en_i);
    StgValue_16_Timer_on_clock_fu_66->addr_bi(addr_bi);
    StgValue_16_Timer_on_clock_fu_66->data_bi(data_bi);
    StgValue_16_Timer_on_clock_fu_66->data_bo(StgValue_16_Timer_on_clock_fu_66_data_bo);
    StgValue_16_Timer_on_clock_fu_66->data_bo_ap_vld(StgValue_16_Timer_on_clock_fu_66_data_bo_ap_vld);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tmr_V_i(Timer_m_tmr_V);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tmr_V_o(StgValue_16_Timer_on_clock_fu_66_Timer_m_tmr_V_o);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tmr_V_o_ap_vld(StgValue_16_Timer_on_clock_fu_66_Timer_m_tmr_V_o_ap_vld);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tval_V_i(Timer_m_tval_V);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tval_V_o(StgValue_16_Timer_on_clock_fu_66_Timer_m_tval_V_o);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tval_V_o_ap_vld(StgValue_16_Timer_on_clock_fu_66_Timer_m_tval_V_o_ap_vld);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tconf_V_i(Timer_m_tconf_V);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tconf_V_o(StgValue_16_Timer_on_clock_fu_66_Timer_m_tconf_V_o);
    StgValue_16_Timer_on_clock_fu_66->Timer_m_tconf_V_o_ap_vld(StgValue_16_Timer_on_clock_fu_66_Timer_m_tconf_V_o_ap_vld);

    SC_METHOD(thread_Timer_m_tconf_V);
    dont_initialize();
    sensitive << ( clk_i.pos() );

    SC_METHOD(thread_Timer_m_tmr_V);
    dont_initialize();
    sensitive << ( clk_i.pos() );

    SC_METHOD(thread_Timer_m_tval_V);
    dont_initialize();
    sensitive << ( clk_i.pos() );

    SC_METHOD(thread_data_bo);
    dont_initialize();
    sensitive << ( clk_i.pos() );

    SC_METHOD(thread_Timer_ssdm_thread_load_fu_90_p1);

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( clk_i.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Timer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk_i, "(port)clk_i");
    sc_trace(mVcdFile, rst_i, "(port)rst_i");
    sc_trace(mVcdFile, en_i, "(port)en_i");
    sc_trace(mVcdFile, addr_bi, "(port)addr_bi");
    sc_trace(mVcdFile, data_bi, "(port)data_bi");
    sc_trace(mVcdFile, we_bi, "(port)we_bi");
    sc_trace(mVcdFile, data_bo, "(port)data_bo");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Timer_ssdm_thread_load_fu_90_p1, "Timer_ssdm_thread_load_fu_90_p1");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, StgValue_16_Timer_on_clock_fu_66_data_bo, "StgValue_16_Timer_on_clock_fu_66_data_bo");
    sc_trace(mVcdFile, StgValue_16_Timer_on_clock_fu_66_data_bo_ap_vld, "StgValue_16_Timer_on_clock_fu_66_data_bo_ap_vld");
    sc_trace(mVcdFile, StgValue_16_Timer_on_clock_fu_66_Timer_m_tmr_V_o, "StgValue_16_Timer_on_clock_fu_66_Timer_m_tmr_V_o");
    sc_trace(mVcdFile, StgValue_16_Timer_on_clock_fu_66_Timer_m_tmr_V_o_ap_vld, "StgValue_16_Timer_on_clock_fu_66_Timer_m_tmr_V_o_ap_vld");
    sc_trace(mVcdFile, StgValue_16_Timer_on_clock_fu_66_Timer_m_tval_V_o, "StgValue_16_Timer_on_clock_fu_66_Timer_m_tval_V_o");
    sc_trace(mVcdFile, StgValue_16_Timer_on_clock_fu_66_Timer_m_tval_V_o_ap_vld, "StgValue_16_Timer_on_clock_fu_66_Timer_m_tval_V_o_ap_vld");
    sc_trace(mVcdFile, StgValue_16_Timer_on_clock_fu_66_Timer_m_tconf_V_o, "StgValue_16_Timer_on_clock_fu_66_Timer_m_tconf_V_o");
    sc_trace(mVcdFile, StgValue_16_Timer_on_clock_fu_66_Timer_m_tconf_V_o_ap_vld, "StgValue_16_Timer_on_clock_fu_66_Timer_m_tconf_V_o_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, Timer_m_tmr_V, "Timer_m_tmr_V");
    sc_trace(mVcdFile, Timer_m_tval_V, "Timer_m_tval_V");
    sc_trace(mVcdFile, Timer_m_tconf_V, "Timer_m_tconf_V");
#endif

    }
    mHdltvinHandle.open("Timer.hdltvin.dat");
    mHdltvoutHandle.open("Timer.hdltvout.dat");
}

Timer::~Timer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete StgValue_16_Timer_on_clock_fu_66;
}

void Timer::thread_Timer_m_tconf_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, StgValue_16_Timer_on_clock_fu_66_Timer_m_tconf_V_o_ap_vld.read())) {
        Timer_m_tconf_V = StgValue_16_Timer_on_clock_fu_66_Timer_m_tconf_V_o.read();
    }
}

void Timer::thread_Timer_m_tmr_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, StgValue_16_Timer_on_clock_fu_66_Timer_m_tmr_V_o_ap_vld.read())) {
        Timer_m_tmr_V = StgValue_16_Timer_on_clock_fu_66_Timer_m_tmr_V_o.read();
    }
}

void Timer::thread_Timer_m_tval_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, StgValue_16_Timer_on_clock_fu_66_Timer_m_tval_V_o_ap_vld.read())) {
        Timer_m_tval_V = StgValue_16_Timer_on_clock_fu_66_Timer_m_tval_V_o.read();
    }
}

void Timer::thread_data_bo() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, StgValue_16_Timer_on_clock_fu_66_data_bo_ap_vld.read())) {
        data_bo = StgValue_16_Timer_on_clock_fu_66_data_bo.read();
    }
}

void Timer::thread_Timer_ssdm_thread_load_fu_90_p1() {
    Timer_ssdm_thread_load_fu_90_p1 = ap_const_lv1_0;
}

void Timer::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void Timer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Timer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"rst_i\" :  \"" << rst_i.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"en_i\" :  \"" << en_i.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"addr_bi\" :  \"" << addr_bi.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_bi\" :  \"" << data_bi.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"we_bi\" :  \"" << we_bi.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"data_bo\" :  \"" << data_bo.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

