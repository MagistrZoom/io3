/*
 * main.c
 *
 *  Created on: 27 Nov. 2017
 *      Author: izoomko
 */

#include <xil_io.h>

#define GPIO_ADDRESS	0x40000000
#define BRAM_ADDRESS	0xC0000000

#define TIMER1 BRAM_ADDRESS
#define TIMER2 BRAM_ADDRESS + 0xC

#define TMR 0x0
#define TVAL 0x4
#define TCONF 0x8

#define ICCONF 0x18
#define FIFO_NOT_EMPTY 0x8
#define FIFO_OV 0x10

#define ICBUF 0x1C


#define TIMER_ADDRESS	0x41C00000
#define TCSR0	0x00
#define TLR0	0x04
#define TCR0	0x08
#define TCSR1	0x10
#define TLR1	0x14
#define TCR1	0x18

#define C_PER	77

int set_pwm(UINTPTR Addr, u32 period, u32 impulse){
	Xil_Out32(GPIO_ADDRESS,	0);
	Xil_Out32(Addr+TCSR0,	0);
	Xil_Out32(Addr+TCSR1,	1 << 9 /* pwm t1 */ |
							1 << 2 /* generate signal t1 */ |
							1 << 1 /* down timer1 */);
	/*
	 * When counters are configured to count down (UDT = 1):
	 *	PWM_PERIOD = (TLR0 + 2) * AXI_CLOCK_PERIOD
	 *	PWM_HIGH_TIME = (TLR1 + 2) * AXI_CLOCK_PERIOD
	 */
	Xil_Out32(Addr+TLR0,	period - 2);
	Xil_Out32(Addr+TCR0,	0);
	Xil_Out32(Addr+TLR1,	impulse - 2);
	Xil_Out32(Addr+TCR1,	0);
	Xil_Out32(Addr+TCSR0,	1 << 10 /* en all */ |
							1 << 9  /* pwm t1 */  |
							1 << 2  /* generate signal t1 */ |
							1 << 1  /* down timer1 */);
	Xil_Out32(GPIO_ADDRESS,	impulse);
	return 0;
}

int main() {
//    bus_write(0x0, (uint16_t) ~0);
//    bus_write(0x8, Timer::TimerInc);

	int state = 0;
	while (1) {
		switch (state) {
		case 0: // init
			Xil_Out32(TIMER1 + TCONF,	2);
			Xil_Out32(TIMER1 + TMR,	~0);
			Xil_Out32(TIMER1 + TCONF,	1);

			Xil_Out32(ICCONF,	0x1 | 0x20);

			set_pwm(TIMER_ADDRESS, 60, 15);
			break;
		case 1: // wait for non-empty
			u32 icconf = Xil_In32(IC + ICCONF);
			if (icconf & FIFO_NOT_EMPTY) {
					switch (mips_inner_state) {
							case 0: {
									mips_state = 2;
									break;
							}
							case 1: {
									mips_state = 3;
									break;
							}
					}
			}

			break;
		}
	}
	Xil_In32(BRAM_ADDRESS + 0x1C);
	return 0;
}
