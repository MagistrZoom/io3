/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <xil_io.h>
#include "mb_interface.h"


#define GPIO_ADDRESS	0x40000000
#define BRAM_ADDRESS	0xC0000000

#define TIMER1 BRAM_ADDRESS
#define TIMER2 BRAM_ADDRESS + 0xC
	#define TMR 0x0
	#define TVAL 0x4
	#define TCONF 0x8

#define IC BRAM_ADDRESS + 0x18
	#define ICCONF 0x0
		#define FIFO_NOT_EMPTY 0x8
		#define FIFO_OV 0x10
	#define ICBUF 0x4


#define TIMER_ADDRESS	0x41C00000
#define AXI_TIMER_1_ADDRESS 0x41C10000
#define TCSR0	0x00
#define TLR0	0x04
#define TCR0	0x08
#define TCSR1	0x10
#define TLR1	0x14
#define TCR1	0x18

#define TCS_OFFSET      0x0
#define TL_OFFSET       0x4
#define TC_OFFSET       0x8

#define INTERRUPT       0x100

#define ENALL   0x400 //enable all timers
#define PWMA    0x200 //enable pulse width modulation
#define ENT             0x080 //enable timer
#define ENIT    0x040 //enable interrupt
#define ARHT    0x010 //auto reload timer
#define GENT    0x004 //enable external general signal
#define DTM             0x002 //down timer mode

#define CYCLE_TIME 100000000


int set_pwm(UINTPTR Addr, u32 period, u32 impulse){
	//Xil_Out32(GPIO_ADDRESS,	0);
	Xil_Out32(Addr+TCSR0,	0);
	Xil_Out32(Addr+TCSR1,	1 << 9 /* pwm t1 */ |
							1 << 2 /* generate signal t1 */ |
							1 << 1 /* down timer1 */);
	/*
	 * When counters are configured to count down (UDT = 1):
	 *	PWM_PERIOD = (TLR0 + 2) * AXI_CLOCK_PERIOD
	 *	PWM_HIGH_TIME = (TLR1 + 2) * AXI_CLOCK_PERIOD
	 */
	Xil_Out32(Addr+TLR0,	period - 2);
	Xil_Out32(Addr+TCR0,	0);
	Xil_Out32(Addr+TLR1,	impulse - 2);
	Xil_Out32(Addr+TCR1,	0);
	Xil_Out32(Addr+TCSR0,	1 << 10 /* en all */ |
							1 << 9  /* pwm t1 */  |
							1 << 2  /* generate signal t1 */ |
							1 << 1  /* down timer1 */);
	//Xil_Out32(GPIO_ADDRESS,	impulse);
	return 0;
}

void reverse(char str[], int len)
{
    int start, end;
    char temp;
    for(start=0, end=len-1; start < end; start++, end--) {
        temp = *(str+start);
        *(str+start) = *(str+end);
        *(str+end) = temp;
    }
}

char* itoa(int num, char* str, int base)
{
    int i = 0;
    int isNegative = 0;

    /* A zero is same "0" string in all base */
    if (num == 0) {
        str[i] = '0';
        str[i + 1] = '\0';
        return str;
    }

    /* negative numbers are only handled if base is 10
       otherwise considered unsigned number */
    if (num < 0 && base == 10) {
        isNegative = 1;
        num = -num;
    }

    while (num != 0) {
        int rem = num % base;
        str[i++] = (rem > 9)? (rem-10) + 'A' : rem + '0';
        num = num/base;
    }

    /* Append negative sign for negative numbers */
    if (isNegative){
        str[i++] = '-';
    }

    str[i] = '\0';

    reverse(str, i);

    return str;
}

enum cycle_t {
        FIRST = 0,
        SECOND = 1,
        THIRD = 2
};


volatile static u8 cycle = FIRST;
volatile static u32 high_time[] = {50000, 150000, 450000};
void int_handler(void) __attribute__ ((interrupt_handler));

#define LOW_TIME 150000

#define TIMER1_OFFSET   0x10

void int_handler(void) {
        Xil_Out32(AXI_TIMER_1_ADDRESS + TCS_OFFSET, INTERRUPT | ENT | ENIT | ARHT | DTM);
        if (cycle == THIRD) {
                cycle = FIRST;
                Xil_Out32(IC + ICCONF,	0x0 | 0x20);
                Xil_Out32(TIMER1 + TVAL,	0);
                Xil_Out32(IC + ICCONF,	0x1 | 0x20);
        } else {
                cycle++;
        }

        set_pwm(TIMER_ADDRESS, LOW_TIME + high_time[cycle], high_time[cycle]);

        //Xil_Out32(GPIO_ADDRESS, cycle);
}


#define LAB3_ABS(x) ((x) > (0) ? (x) : (-(x)))
int main()
{
	init_platform();
    u32 impulse_posedge = 0;
    u32 impulse_negedge = 0;
    u32 next_posedge = 0;

    char buf[16];
    int first_run = 1;
    // static int c = 0;
    int read_n = 0;
    unsigned ratio = 0;
	int state = 0;
	while (1) {
		switch (state) {
		case 0: // init
			set_pwm(TIMER_ADDRESS, 200000, 50000);
			Xil_Out32(TIMER1 + TCONF,	2);
			Xil_Out32(TIMER1 + TMR,	~0);
			Xil_Out32(TIMER1 + TCONF,	1);

			Xil_Out32(IC + ICCONF,	0x1 | 0x20); // shoud be moved upper probably
            Xil_Out32(AXI_TIMER_1_ADDRESS + TL_OFFSET, CYCLE_TIME - 2);
            Xil_Out32(AXI_TIMER_1_ADDRESS + TCS_OFFSET, ENT | ARHT | DTM);
            Xil_Out32(AXI_TIMER_1_ADDRESS + TCS_OFFSET, INTERRUPT | ENT | ENIT | ARHT | DTM);

			microblaze_enable_interrupts();
			state = 1;
			break;
		case 1: {// wait for non-empty
			u32 icconf = Xil_In32(IC + ICCONF);
            if (icconf & FIFO_NOT_EMPTY) {
                switch (read_n) {
                    case 0:
                        state = 2;
                        break;
                    case 1:
                        state = 3;
                        break;
                    case 2:
                        state = 4;
                        break;
                }
            }
            if (icconf & FIFO_OV) {
            	Xil_Out32(GPIO_ADDRESS, ~0);
            	print("PANIC\n\r");
            	while (1);
                //abort();
            }
		} break;
        case 2: // read impulse posedge
        	if (first_run) {
        		Xil_In32(IC + ICBUF);
        	}
			impulse_posedge = next_posedge;
			state = 1;
			read_n = 1;
            break;
        case 3: // imp negedge
            impulse_negedge = Xil_In32(IC + ICBUF);
            state = 1;
            read_n = 2;
            break;
        case 4: { // signal end
            next_posedge = Xil_In32(IC + ICBUF);
			state = 1;
			read_n = 0;
			const unsigned epsilon = 20;
			if (!first_run) {
				if ()
				unsigned value = ((float) (impulse_negedge - impulse_posedge) / (next_posedge - impulse_posedge))*100;
				if (LAB3_ABS(value - ratio) > epsilon && value > 0) {
					ratio = value;
					char buf[128];
					snprintf(buf, 127, "%lu %lu %lu %u\n\r", impulse_posedge, impulse_negedge, next_posedge, (unsigned)(ratio * 100)/*, ratio*/);
					Xil_Out32(GPIO_ADDRESS, ratio);
					//snprintf(buf, 16, "%u\n\r", ratio);
					print(buf);
				}
				if (value < 0) {
					print("[Error] Timer overflow probably\n\r");
				}
			}
			else {
				first_run = 0;
			}
        } break;
		}
	}

	cleanup_platform();
	return 0;
}
